/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_PROTOBUF_SPIRC_PB_H_INCLUDED
#define PB_PROTOBUF_SPIRC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MessageType { 
    MessageType_kMessageTypeHello = 1, 
    MessageType_kMessageTypeGoodbye = 2, 
    MessageType_kMessageTypeProbe = 3, 
    MessageType_kMessageTypeNotify = 10, 
    MessageType_kMessageTypeLoad = 20, 
    MessageType_kMessageTypePlay = 21, 
    MessageType_kMessageTypePause = 22, 
    MessageType_kMessageTypePlayPause = 23, 
    MessageType_kMessageTypeSeek = 24, 
    MessageType_kMessageTypePrev = 25, 
    MessageType_kMessageTypeNext = 26, 
    MessageType_kMessageTypeVolume = 27, 
    MessageType_kMessageTypeShuffle = 28, 
    MessageType_kMessageTypeRepeat = 29, 
    MessageType_kMessageTypeVolumeDown = 31, 
    MessageType_kMessageTypeVolumeUp = 32, 
    MessageType_kMessageTypeReplace = 33, 
    MessageType_kMessageTypeLogout = 34, 
    MessageType_kMessageTypeAction = 35 
} MessageType;

typedef enum _PlayStatus { 
    PlayStatus_kPlayStatusStop = 0, 
    PlayStatus_kPlayStatusPlay = 1, 
    PlayStatus_kPlayStatusPause = 2, 
    PlayStatus_kPlayStatusLoading = 3 
} PlayStatus;

typedef enum _CapabilityType { 
    CapabilityType_kSupportedContexts = 1, 
    CapabilityType_kCanBePlayer = 2, 
    CapabilityType_kRestrictToLocal = 3, 
    CapabilityType_kDeviceType = 4, 
    CapabilityType_kGaiaEqConnectId = 5, 
    CapabilityType_kSupportsLogout = 6, 
    CapabilityType_kIsObservable = 7, 
    CapabilityType_kVolumeSteps = 8, 
    CapabilityType_kSupportedTypes = 9, 
    CapabilityType_kCommandAcks = 10 
} CapabilityType;

/* Struct definitions */
typedef struct _Capability { 
    bool has_typ;
    CapabilityType typ; 
    pb_size_t intValue_count;
    int64_t intValue[50]; 
    pb_size_t stringValue_count;
    char stringValue[50][50]; 
} Capability;

typedef struct _State { 
    char *context_uri; 
    bool has_index;
    uint32_t index; 
    bool has_position_ms;
    uint32_t position_ms; 
    bool has_status;
    PlayStatus status; 
    bool has_position_measured_at;
    uint64_t position_measured_at; 
    pb_callback_t context_description; 
    bool has_shuffle;
    bool shuffle; 
    bool has_repeat;
    bool repeat; 
    bool has_playing_track_index;
    uint32_t playing_track_index; 
    pb_size_t track_count;
    struct _TrackRef *track; 
} State;

typedef struct _TrackRef { 
    pb_bytes_array_t *gid; 
    char *uri; 
    bool has_queued;
    bool queued; 
    char *context; 
} TrackRef;

typedef struct _DeviceState { 
    char *sw_version; 
    bool has_is_active;
    bool is_active; 
    bool has_can_play;
    bool can_play; 
    bool has_volume;
    uint32_t volume; 
    char *name; 
    bool has_error_code;
    uint32_t error_code; 
    bool has_became_active_at;
    int64_t became_active_at; 
    pb_callback_t error_message; 
    pb_size_t capabilities_count;
    Capability capabilities[17]; 
    pb_callback_t local_uris; 
} DeviceState;

typedef struct _Frame { 
    bool has_version;
    uint32_t version; 
    char *ident; 
    char *protocol_version; 
    bool has_seq_nr;
    uint32_t seq_nr; 
    bool has_typ;
    MessageType typ; 
    bool has_device_state;
    DeviceState device_state; 
    bool has_state;
    State state; 
    bool has_position;
    uint32_t position; 
    bool has_volume;
    uint32_t volume; 
    bool has_state_update_id;
    int64_t state_update_id; 
    pb_size_t recipient_count;
    char **recipient; 
} Frame;


/* Helper constants for enums */
#define _MessageType_MIN MessageType_kMessageTypeHello
#define _MessageType_MAX MessageType_kMessageTypeAction
#define _MessageType_ARRAYSIZE ((MessageType)(MessageType_kMessageTypeAction+1))

#define _PlayStatus_MIN PlayStatus_kPlayStatusStop
#define _PlayStatus_MAX PlayStatus_kPlayStatusLoading
#define _PlayStatus_ARRAYSIZE ((PlayStatus)(PlayStatus_kPlayStatusLoading+1))

#define _CapabilityType_MIN CapabilityType_kSupportedContexts
#define _CapabilityType_MAX CapabilityType_kCommandAcks
#define _CapabilityType_ARRAYSIZE ((CapabilityType)(CapabilityType_kCommandAcks+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define TrackRef_init_default                    {NULL, NULL, false, 0, NULL}
#define State_init_default                       {NULL, false, 0, false, 0, false, _PlayStatus_MIN, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, 0, NULL}
#define Capability_init_default                  {false, _CapabilityType_MIN, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}}
#define DeviceState_init_default                 {NULL, false, 0, false, 0, false, 0, NULL, false, 0, false, 0, {{NULL}, NULL}, 0, {Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default, Capability_init_default}, {{NULL}, NULL}}
#define Frame_init_default                       {false, 0, NULL, NULL, false, 0, false, _MessageType_MIN, false, DeviceState_init_default, false, State_init_default, false, 0, false, 0, false, 0, 0, NULL}
#define TrackRef_init_zero                       {NULL, NULL, false, 0, NULL}
#define State_init_zero                          {NULL, false, 0, false, 0, false, _PlayStatus_MIN, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, 0, NULL}
#define Capability_init_zero                     {false, _CapabilityType_MIN, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}}
#define DeviceState_init_zero                    {NULL, false, 0, false, 0, false, 0, NULL, false, 0, false, 0, {{NULL}, NULL}, 0, {Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero, Capability_init_zero}, {{NULL}, NULL}}
#define Frame_init_zero                          {false, 0, NULL, NULL, false, 0, false, _MessageType_MIN, false, DeviceState_init_zero, false, State_init_zero, false, 0, false, 0, false, 0, 0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define Capability_typ_tag                       1
#define Capability_intValue_tag                  2
#define Capability_stringValue_tag               3
#define State_context_uri_tag                    2
#define State_index_tag                          3
#define State_position_ms_tag                    4
#define State_status_tag                         5
#define State_position_measured_at_tag           7
#define State_context_description_tag            8
#define State_shuffle_tag                        13
#define State_repeat_tag                         14
#define State_playing_track_index_tag            26
#define State_track_tag                          27
#define TrackRef_gid_tag                         1
#define TrackRef_uri_tag                         2
#define TrackRef_queued_tag                      3
#define TrackRef_context_tag                     4
#define DeviceState_sw_version_tag               1
#define DeviceState_is_active_tag                10
#define DeviceState_can_play_tag                 11
#define DeviceState_volume_tag                   12
#define DeviceState_name_tag                     13
#define DeviceState_error_code_tag               14
#define DeviceState_became_active_at_tag         15
#define DeviceState_error_message_tag            16
#define DeviceState_capabilities_tag             17
#define DeviceState_local_uris_tag               18
#define Frame_version_tag                        1
#define Frame_ident_tag                          2
#define Frame_protocol_version_tag               3
#define Frame_seq_nr_tag                         4
#define Frame_typ_tag                            5
#define Frame_device_state_tag                   7
#define Frame_state_tag                          12
#define Frame_position_tag                       13
#define Frame_volume_tag                         14
#define Frame_state_update_id_tag                17
#define Frame_recipient_tag                      18

/* Struct field encoding specification for nanopb */
#define TrackRef_FIELDLIST(X, a) \
X(a, POINTER,  OPTIONAL, BYTES,    gid,               1) \
X(a, POINTER,  OPTIONAL, STRING,   uri,               2) \
X(a, STATIC,   OPTIONAL, BOOL,     queued,            3) \
X(a, POINTER,  OPTIONAL, STRING,   context,           4)
#define TrackRef_CALLBACK NULL
#define TrackRef_DEFAULT NULL

#define State_FIELDLIST(X, a) \
X(a, POINTER,  OPTIONAL, STRING,   context_uri,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   position_ms,       4) \
X(a, STATIC,   OPTIONAL, UENUM,    status,            5) \
X(a, STATIC,   OPTIONAL, UINT64,   position_measured_at,   7) \
X(a, CALLBACK, OPTIONAL, STRING,   context_description,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     shuffle,          13) \
X(a, STATIC,   OPTIONAL, BOOL,     repeat,           14) \
X(a, STATIC,   OPTIONAL, UINT32,   playing_track_index,  26) \
X(a, POINTER,  REPEATED, MESSAGE,  track,            27)
#define State_CALLBACK pb_default_field_callback
#define State_DEFAULT NULL
#define State_track_MSGTYPE TrackRef

#define Capability_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    typ,               1) \
X(a, STATIC,   REPEATED, INT64,    intValue,          2) \
X(a, STATIC,   REPEATED, STRING,   stringValue,       3)
#define Capability_CALLBACK NULL
#define Capability_DEFAULT (const pb_byte_t*)"\x08\x01\x00"

#define DeviceState_FIELDLIST(X, a) \
X(a, POINTER,  OPTIONAL, STRING,   sw_version,        1) \
X(a, STATIC,   OPTIONAL, BOOL,     is_active,        10) \
X(a, STATIC,   OPTIONAL, BOOL,     can_play,         11) \
X(a, STATIC,   OPTIONAL, UINT32,   volume,           12) \
X(a, POINTER,  OPTIONAL, STRING,   name,             13) \
X(a, STATIC,   OPTIONAL, UINT32,   error_code,       14) \
X(a, STATIC,   OPTIONAL, INT64,    became_active_at,  15) \
X(a, CALLBACK, OPTIONAL, STRING,   error_message,    16) \
X(a, STATIC,   REPEATED, MESSAGE,  capabilities,     17) \
X(a, CALLBACK, REPEATED, STRING,   local_uris,       18)
#define DeviceState_CALLBACK pb_default_field_callback
#define DeviceState_DEFAULT NULL
#define DeviceState_capabilities_MSGTYPE Capability

#define Frame_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   version,           1) \
X(a, POINTER,  OPTIONAL, STRING,   ident,             2) \
X(a, POINTER,  OPTIONAL, STRING,   protocol_version,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   seq_nr,            4) \
X(a, STATIC,   OPTIONAL, UENUM,    typ,               5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  device_state,      7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  state,            12) \
X(a, STATIC,   OPTIONAL, UINT32,   position,         13) \
X(a, STATIC,   OPTIONAL, UINT32,   volume,           14) \
X(a, STATIC,   OPTIONAL, INT64,    state_update_id,  17) \
X(a, POINTER,  REPEATED, STRING,   recipient,        18)
#define Frame_CALLBACK NULL
#define Frame_DEFAULT (const pb_byte_t*)"\x28\x01\x00"
#define Frame_device_state_MSGTYPE DeviceState
#define Frame_state_MSGTYPE State

extern const pb_msgdesc_t TrackRef_msg;
extern const pb_msgdesc_t State_msg;
extern const pb_msgdesc_t Capability_msg;
extern const pb_msgdesc_t DeviceState_msg;
extern const pb_msgdesc_t Frame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TrackRef_fields &TrackRef_msg
#define State_fields &State_msg
#define Capability_fields &Capability_msg
#define DeviceState_fields &DeviceState_msg
#define Frame_fields &Frame_msg

/* Maximum encoded size of messages (where known) */
/* TrackRef_size depends on runtime parameters */
/* State_size depends on runtime parameters */
/* DeviceState_size depends on runtime parameters */
/* Frame_size depends on runtime parameters */
#define Capability_size                          3102

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
